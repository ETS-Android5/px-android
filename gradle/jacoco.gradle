apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.6'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    // See related issue https://github.com/gradle/gradle/issues/5184#issuecomment-457865951
    jacoco.excludes = ['jdk.internal.*']
}

tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn 'testDebugUnitTest'
    dependsOn 'createDebugCoverageReport'

    // See related issue https://github.com/gradle/gradle/issues/14132
    dependsOn 'connectedDebugAndroidTest'
    tasks.findByName('createDebugAndroidTestCoverageReport').mustRunAfter 'connectedDebugAndroidTest'

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/px/internal/actions/**',
                      '**/px/internal/viewmodel/**',
                      '**/px/tracking/internal/model/**',
                      '**/px/model/**',
                      '**/px/configuration/**',
                      '**/px/addons/model/**',
                      '**/PaymentCongratsModel.*',
                      '**/*Builder*']

    def javaClasses = fileTree(dir: "${buildDir}/intermediates/javac/debug/classes/", excludes: fileFilter)
    def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug/", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([
        javaClasses,
        kotlinClasses
    ]))
    executionData.setFrom(fileTree(dir:project.buildDir, includes:['jacoco/testDebugUnitTest.exec']))
}
