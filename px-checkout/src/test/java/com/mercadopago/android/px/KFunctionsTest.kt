package com.mercadopago.android.px

import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import org.junit.Assert
import org.mockito.Mockito
import org.robolectric.util.ReflectionHelpers
import kotlin.reflect.KClass

/**
 * Returns Mockito.any() as nullable type to avoid java.lang.IllegalStateException when
 * null is returned.
 *
 * See https://medium.com/mobile-app-development-publication/befriending-kotlin-and-mockito-1c2e7b0ef791.
 * See https://stackoverflow.com/questions/30305217/is-it-possible-to-use-mockito-in-kotlin.
 */
fun <T> any(type : Class<T>): T {
    return Mockito.any(type) as T
}

inline fun <reified T : Any> any() = Mockito.any(T::class.java) ?: createInstance()

inline fun <reified T : Any> createInstance(): T = createInstance(T::class)

fun <T : Any> createInstance(kClass: KClass<T>): T {
    return castNull()
}

/**
 * Uses a quirk in the bytecode generated by Kotlin
 * to cast [null] to a non-null type.
 *
 * See https://youtrack.jetbrains.com/issue/KT-8135.
 */
@Suppress("UNCHECKED_CAST")
fun <T> castNull(): T = null as T

/**
 * Extensions
 */
internal fun View.assertVisible() {
    Assert.assertEquals(visibility, View.VISIBLE)
}

internal fun View.assertVisible(viewId: Int) {
    findView<View>(viewId).assertVisible()
}

internal fun View.assertGone() {
    Assert.assertEquals(visibility, View.GONE)
}

internal fun View.assertGone(viewId: Int) {
    findView<View>(viewId).assertGone()
}

internal inline fun <reified V : View> ViewGroup.assertChildCount(expected: Int) {
    var actual = 0
    for (i in 0..childCount) {
        if (getChildAt(i) is V) {
            actual++
        }
    }
    Assert.assertEquals(actual, expected)
}

internal fun TextView.assertText(text: CharSequence) {
    Assert.assertEquals(text.toString(), this.text.toString())
}

internal inline fun <reified T> Any.getField(field: String): T = ReflectionHelpers.getField(this, field)

internal fun Any.setField(field: String, value: Any) = ReflectionHelpers.setField(this, field, value)

internal inline fun <reified V : View> View.findView(viewId: Int): V = findViewById(viewId)

internal fun <T : Any> T.assertEquals(expected: T) = Assert.assertEquals(this, expected)
